var documenterSearchIndex = {"docs":
[{"location":"index.html#EspyInsideFunction.jl","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"","category":"section"},{"location":"index.html#Package-for-the-extraction-of-internal-variables-from-a-function","page":"EspyInsideFunction.jl","title":"Package for the extraction of internal variables from a function","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"EspyInsideFunction.jl provides functionality to extract internal variables from a function. \"Internal\" refers here to variables that are neither parameters nor outputs of the function.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The need for EspyInsideFunction arises when there is a difference between","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"what the rest of the software needs to exchange with the function, in order to carry out the software's task, and\nwhat the user may want to know about intermediate results internal to the function.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"An example is the extraction of results in a finite element software. The code for an element type must include a function that takes in the degrees of freedom (in mechanics: nodel displacements) and output the element's contributions to the residuals (forces). The user is interested in intermediate results such as stresses and strains.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"Writing the function to explicitly export intermediate results clutters the element code, the element API, and the rest of the software.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"EspyInsideFunction's approach to this problem is to use metaprogramming to generate two versions of the function's code","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The fast version, that does nothing to save or export internediate results.  This is then used in e.g. the finite element solution process.\nThe exporting version.  In it receives additional parameters\na vector out, to be filled with the requested results.\na key describing which internal results are wanted and where in out to store which result.\nTypicaly, this version of the code is called once the computations have been completed (using the fast version), to extract the requested results.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"A complete example can be found in EspyDemo.jl","category":"page"},{"location":"index.html#code-markup","page":"EspyInsideFunction.jl","title":"Code markup","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The following is an example of annotated code","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"using EspyInsideFunction\r\nstruct Material\r\n    E   :: Float64 \r\nend\r\n@espy function material(m::Material,ε)\r\n    :σ = m.E*ε\r\n    return σ\r\nend\r\nrequestable(m::Material) = (σ=scalar,)\r\n\r\n\r\nstruct Element  \r\n    L₀  :: Float64  \r\n    A   :: Float64  \r\n    ρg  :: Float64  \r\n    mat :: Material \r\nend\r\n\r\nconst ngp = 1 \r\n\r\n@espy function force(e::Element,ΔX)\r\n    :w      = e.ρg*e.A*e.L₀\r\n    :R      = [w/2,w/2]\r\n    for igp = 1:ngp \r\n        :ε  = (ΔX[2]-ΔX[1])/e.L₀\r\n        σ   = :material(e.mat,ε)  \r\n        :T  = e.A*σ\r\n        R   = +[T,-T]\r\n    end\r\n    return R\r\nend\r\nrequestable(e::Element) = (w=scalar, R=(2,), gp= \r\n       forloop(ngp, (ε=scalar, T=scalar, material=requestable(e.mat) )))\r\n\r\n# output\r\nrequestable (generic function with 2 methods)","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The code of each function is prepended with @espy.  The name of variables of interest is annotated with a : (:ε,:σ and so forth). These variable names must appear on the left hand side of an equation, and can not be array references (writing :a[igp] = ... will not work). Call to functions which may contain variables of interest must be annotated with a : (as in σ   = :material(e.mat,ε)).","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The last line of code (requestable) provides the obtainable intermediate results and their sizes.  See Section Requestable for more details.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The macro @espy generates two versions of the code: first a clean code (for example)","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"function material(m::Material,ε)\r\n    σ = m.E*ε\r\n    return σ\r\nend","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"and second, a version of the code to be used for result extraction.  Its interface is","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"function material(out,req,m::Material,εz)\r\n    ...\r\nend","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The variables out (for output) and req (for request) are discussed in the following.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"One can replace the @espy annotation with @espydbg to examine the code that is generated:","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"@espydbg function material(m::Material,ε)\r\n    ...\r\nend","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The generated code itself contains macros.  To see the final code, one can type","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"@macroexpand @espy function material(m::Material,ε)\r\n    ...\r\nend","category":"page"},{"location":"index.html#requestable","page":"EspyInsideFunction.jl","title":"Requestable variables","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The programmer of the annotated function must provide a description of the requestable variables and their size, as well as loops with their length, and sub-functions.  ","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"In at last code line of the code example in Section Code markup,","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"requestable(e::Element) = (w=scalar, R=(2,), \r\n          gp=forloop(ngp, (ε=scalar, T=scalar, material=requestable(e.mat)) ) )","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"the choice is made to provide this as a method associated to Element.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"forloop and scalar are respectively a constructor and a constant exported by EspyInsideFunction.jl. The line will be interpreted by the function makekey (Section Output access key) as stating that within the body of the espied function (here residual), there is a loop exactly of the form","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"for igp = 1:ngp","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"where gp is from the expression gp=forloop(....  EspyInsideFunction.jl is not flexible on this point and requires a for loop, not a while loop or comprehension.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"Where some of the variables are arrays, their size must be described:","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"using EspyInsideFunction\r\n\r\nndof        = 16\r\nnx          = 2\r\nngp         = 4\r\nrequestable = (X=(ndof),gp=forloop(ngp,(F=(nx,nx),material=(σ=(nx,nx),ε=(nx,nx)))))\r\n# output\r\n(X = 16, gp = forloop(4, (F = (2, 2), material = (σ = (2, 2), ε = (2, 2)))))","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"A development aim is to make it unnecessary to provide a list of requestable variable.  Until then, one should be meticulous in writing this, as any mistake leads to error message that are difficult to interpret.","category":"page"},{"location":"index.html#Which-variables-types-can-be-exported-in-this-way?","page":"EspyInsideFunction.jl","title":"Which variables types can be exported in this way?","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"EspyInsideFunction is made to store all results from a function inside a single array (e.g. out).  This allows to agregate large amounts of data with only a single allocation.  The code inserted by @espy to capture an intermediate result is of the form","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"out[key.var] .= var","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"if the variable of interest var is an Array, of FLoat64and","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"out[key.var] = var","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"if var is a Float64.  key.var is an integer or an array of integers (generated by makekey). The user has allocated out, typicaly as an array of Float64. For EspyInsideFunction to work Julia must be able to map var onto a full array, and to convert the elements of var, to Float64.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"This works, for example, with var being a Float64, a StaticArray or an ntuple.","category":"page"},{"location":"index.html#Creating-a-request","page":"EspyInsideFunction.jl","title":"Creating a request","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"In order to extract results from a function annotated with @espy and :, the user of the function needs to define a request.  For example","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"request   = @request w,gp[].(ε,material.(σ))\r\n\r\n# output\r\n:((w, (gp[]).(ε, material.(σ))))","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The espied function must contain a variable w outside of any loop.  This request is based on the assumption that in the relevant function (force), there is a for-loop over variable igp taking values from 1 to ngp.  Within this loop, variable ε must appear (and be annotated, and defined as requestable).  Within the same loop, a function material must be called (and be annotated).  Within this function, material, variable σ must appear and be annotated, and defined as requestable.","category":"page"},{"location":"index.html#makekey","page":"EspyInsideFunction.jl","title":"Output access key","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"An espy-key is a data structure with a shape as described in @request, containing indices into the out vector returned by the code generated by @espy.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"Generating this requires","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"A request\nA description of the requestable variables","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"For the later, because the developper of Element decided to associate methods force and requestable to the type Element, we need to create an Element variable. ","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"m          = Material(2.1e11)\r\ne          = Element(1.,1e-4,8000*9.81,m)\r\nkey,nkey   = makekey(request,requestable(e))\r\n\r\n# output\r\n((w = 1, gp = NamedTuple{(:ε, :material), Tuple{Int64, NamedTuple{(:σ,), Tuple{Int64}}}}[(ε = 2, material = (σ = 3,))]), 3)\r\n","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"This produces key such that","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"key.w                \r\n# output\r\n1","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"key.gp[1].ε                \r\n# output\r\n2","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"key.gp[1].material.σ                \r\n# output\r\n3","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"and","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"nkey                \r\n# output\r\n3","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"where nkey is the largest index found in key.","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"If requestable variables are themselves array, key will contain arrays of indices:","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"using EspyInsideFunction\r\nngp         = 8\r\nrequestable = (gp=forloop(ngp,(material=(σ=(2,2),),)),)\r\nrequest     = @request gp[].(material.(σ,),)\r\nkey,nkey    = makekey(request,requestable)\r\n# Output\r\nkey.gp[8].material.σ == [29 31;30 32]","category":"page"},{"location":"index.html#Obtaining-and-accessing-the-outputs","page":"EspyInsideFunction.jl","title":"Obtaining and accessing the outputs","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The following example shows how the user of an espy-annotated function can obtain and access the out variable. Assuming that we have the results ΔXfor which we want to extract intermediate results","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"nel  = 10\r\ntopo = [[i,i+1] for i = 1:nel]\r\nΔX   = [1/2*e.ρg/m.E*((iel*e.L₀)^2-(nel*e.L₀)^2) for iel = 0:nel]\r\n1+1\r\n# output\r\n2","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"then","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"out = Matrix{Float64}(undef,nkey,nel)\r\nfor (iel,t) ∈ enumerate(topo)\r\n    _ = force(@view(out[:,iel]),key, e,ΔX[t])\r\nend\r\n\r\niel = 4\r\nigp = 1\r\nσ = out[key.gp[igp].material.σ,iel]\r\nε = out[key.gp[igp].ε         ,iel] \r\n\r\n# output\r\n1.3080000000000017e-6","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"The macro invoquation @request creates an expression describing the requested outputs.  The call to makekey creates the request key, as well as the number of values in the request. nkey is used to allocate an array for the outputs. The spying version of force.  In the two last lines of the code, key is used to access specific outputs.","category":"page"},{"location":"index.html#Reference","page":"EspyInsideFunction.jl","title":"Reference","text":"","category":"section"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"CurrentModule = EspyInsideFunction","category":"page"},{"location":"index.html","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.jl","text":"@request\r\nmakekey\r\n@espy\r\n@espydbg\r\nforloop\r\nscalar","category":"page"},{"location":"index.html#EspyInsideFunction.@request","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.@request","text":"req = @request expr\n\nCreate a request of internal results wanted from a function. Considering the function presented as example for @espy, examples of possible syntax include\n\nreq       = @request gp[].(s,z,material.(a,b))\nreq       = @request gp[].(s)\nreq       = @request gp[].(material.(a))\n\nThe first expression can be read as follows: \"In the function, there is a for loop over variable igp, and the ressults are wanted as a vector (one element for each cycle of the loop).  Each element of the vector shall be a type (a structure) with a field material, because a function of that name is called in the for loop.  Within that function, a variable a is to be retrived.\n\nNote the need to use parentheses also for single-element lists, as in (s).\n\nSee also: @espy, @espydbg, makekey\n\n\n\n\n\n","category":"macro"},{"location":"index.html#EspyInsideFunction.makekey","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.makekey","text":"key = makekey(requested,requestable)\n\nCreate a \"key\" i.e. a data structure of indices into an array out of internal results, returned by the code generated by @espy.\n\nInputs are\n\nrequested a data structure defining a request. This input is provided  by the user of the code to specify what results are to be extracted.\nrequestable a named tuple defining the names and sizes of intermediate results  that can be requested from a given function: this input is provided\n\nExample\n\nrequestable  = (gp=forloop(2, (z=scalar,s=scalar, material=(a=scalar,b=scalar))),)\nrequested    = @request gp[].(s,z,material.(a,b))\nkey,nkey     = makekey(requested,requestable)\n\nreturns key such that\n\nkey.gp[1] == (s=1, z=2, material = (a=3, b=4))\nkey.gp[2] == (s=5, z=6, material = (a=7, b=8))\nkey.gp[2].material.a == 7\nnkey      == 8\n\nSee also: @espy, @espydbg, @request, forloop, scalar\n\n\n\n\n\n","category":"function"},{"location":"index.html#EspyInsideFunction.@espy","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.@espy","text":"@espy function residual(x,y)\n    ngp=2\n    r = 0\n    for igp=1:ngp\n        :z = x[igp]+y[igp]\n        :s,dum  = :material(z)\n        r += s\n    end\n    return r\nend\n@espy function material(z)\n    :a = z+1\n    :b = a*z\n    return b,3.\nend\n\nTransform the code of a function in which variables and function calls have been annotated with : in order to allow the extraction of intermediate results.\n\nThe above annotated code will result in the generation of \"clean\" code in which the : annotations have been taken out\n\nfunction residual(x,y)\n    ngp=2\n    r = 0\n    for igp=1:ngp\n        z = x[igp]+y[igp]\n        s,dum  = material(z)\n        r += s\n    end\n    return r\nend\nfunction material(z)\n    a = z+1\n    b = a*z\n    return b,3.\nend\n\nThe macro will also generate code with additional out and key arguments:\n\nfunction residual(out,key,x,y)\n    ngp = 2\n    r   = 0\n    for igp = 1:ngp\n        @espy_loop key gp                     # key_gp = key.gp[igp]\n        z = x[igp]+y[igp]\n        @espy_record out key_gp z             # out[key_gp.z] = z\n        s = @espy_call out key_gp material(z) # s = material(out,key_gp.material,z)\n        @espy_record out key_gp s             # out[key_gp.s] = s\n        r += s\n    end\n    return r\nend\nfunction material(out,key,z)\n    a = z+1\n    @espy_record out key a                    # out[key.a] = a\n    b = a*z\n    @espy_record out key b                    # out[key.b] = b\n    return b\nend\n\nThe above code contains more macros, which in turn evaluate as shown in the comments.  More precisely,\n\n@espy_record out key a\n\nevaluates to\n\nif haskey(key,a)\n    out[key.a] = a\nend\n\nkey is a datastructure generated by makekey based on a @request.\n\nWhen the version of residual with additional parameter out has been called, the content of this output is accessed using key:\n\nrequestable  = (gp=forloop(2, (z=scalar,s=scalar, material=(a=scalar,b=scalar))),)\nrequested    = @request gp[].(s,z,material.(a,b))\nkey,nkey     = makekey(requested,requestable)\nresidual(out,key,x,y)\nigp          = 2\nz            = out[key.gp[igp].z]\n\nSee also: @espydbg, @request, makekey\n\n\n\n\n\n","category":"macro"},{"location":"index.html#EspyInsideFunction.@espydbg","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.@espydbg","text":"@espydbg function ...\nend\n\nRun @espy and to generate code and print the output code (for debug purposes).\n\nSee also: @espy, @request, makekey, forloop, scalar\n\n\n\n\n\n","category":"macro"},{"location":"index.html#EspyInsideFunction.forloop","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.forloop","text":"forloop\n\nComponent to build the requestable input to makekey See also: makekey, scalar\n\n\n\n\n\n","category":"type"},{"location":"index.html#EspyInsideFunction.scalar","page":"EspyInsideFunction.jl","title":"EspyInsideFunction.scalar","text":"scalar\n\nComponent to build the requestable input to makekey See also: makekey, forloop\n\n\n\n\n\n","category":"constant"}]
}
