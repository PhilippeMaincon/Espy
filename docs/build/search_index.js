var documenterSearchIndex = {"docs":
[{"location":"index.html#Espy.jl:-result-extraction","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Espy provides functionality to mark variables of interest in the code of a function.  A user can then define which variables are of interest, and obtain their values.","category":"page"},{"location":"index.html#Code-markup","page":"Espy.jl: result extraction","title":"Code markup","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The following is an example of annotated code","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"1   using Espy\r\n2   const ngp=2\r\n4   @espy function residual(x,y)\r\n3       r = 0\r\n5       for igp=1:ngp\r\n6           :z = x[igp]+y[igp]\r\n7           :s  = :material(z)\r\n8           r += s\r\n9       end\r\n10      return r\r\n11  end\r\n12  @espy function material(z)\r\n13      :a = z+1\r\n14      :b = a*z\r\n15      return b\r\n16  end\r\n17  requestable = (gp=forloop(ngp,(z=scalar,s=scalar,material=(a=scalar,b=scalar))),)","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The code of each function is prepended with @espy (lines 2 and 12).  The name of variables of interest (lines 6, 7 13 and 14) is annotated with a :. These variable names must appear on the left hand side of an equation, and can not be array references (writing :a[igp] = ... will not work). Call to functions which may contain variables of interest must be annotated with a : (line 7).","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The macro @espy will generate two versions of the code: first a clean code (for example)","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"1   function material(z)\r\n2       a = z+1\r\n3       b = a*z\r\n4       return b\r\n5   end","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"and second, a version of the code to be used for result extraction.  The function headers will look like:","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"function residual(out,req,x,y)\r\n    ...\r\nend","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The variables out (for output) and req (for request) are discussed in the following.","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"One can modify the code annotation to examine the code that is generated:","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"@espydbg true function residual(x,y)\r\n    ...\r\nend","category":"page"},{"location":"index.html#Creating-a-request","page":"Espy.jl: result extraction","title":"Creating a request","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"In order to extract results from a function annotated with @espy and :, the user of the function needs to define a request.  For example","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"using Espy\r\nreq = @request gp[].(s,z,material.(a,b))","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"This states that in the relevant function (residual), there is a for-loop over variable igp taking values from 1 to ngp.  Within this loop, variables s and z will appear (and be annotated) and are requested.  Within the same loop, a function material is called (and is annotated).  Within this function, material, variables a and b are requested.","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"A slightly more complex example is","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"using Espy\r\nreq = @request X,gp[].(F,material.(σ,ε))","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The espied function will contain a variable X, a for-loop within which a variable F will appear, as well as a call to the function material within which variables σ and ε appear.","category":"page"},{"location":"index.html#Requestable-variables","page":"Espy.jl: result extraction","title":"Requestable variables","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The programmer of the annotated function must provide a description of the requestable variables and their size, as well as loops with their length, and sub-functions.","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Code line 17 in the first example above provides an example (copied here):","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"requestable = (gp=forloop(ngp,(z=scalar,s=scalar,material=(a=scalar,b=scalar))),)","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Where some of the variables are arrays, their size must be described:","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"ndof        = ...\r\nnx          = ...\r\nrequestable = (X=[ndof],gp=forloop(ngp,(F=[nx,nx],material=(σ=[nx,nx],ε=[nx,nx]))),)","category":"page"},{"location":"index.html#Output-access-key","page":"Espy.jl: result extraction","title":"Output access key","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"An espy-key is a data structure with a shape as described in @request, containing indices into the out vector returned by the code generated by @espy.","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Generating this requires","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"A request\nA description of the requestable variables","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"using Espy\r\nrequestable = (gp=forloop(ngp,(z=scalar,s=scalar,material=(a=scalar,b=scalar))),)\r\nrequest     = @request gp[].(s,z,material.(a,b))\r\nkey,nkey    = makekey(request,requestable)","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"This generates key, such that in this case","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"key.gp[1].s          == 1\r\nkey.gp[1].z          == 2\r\nkey.gp[1].material.a == 3\r\nkey.gp[1].material.b == 4\r\nkey.gp[2].s          == 5\r\nkey.gp[2].z          == 6\r\nkey.gp[2].material.a == 7\r\nkey.gp[2].material.b == 8","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"nkey is the highest index that appears in key (the length of the vector out).  In this example nkey==8.","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Where requestable variables are themselves array, the key will contain arrays of indices:","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"key.gp[8].material.σ == [125 126;128 129]","category":"page"},{"location":"index.html#Obtaining-and-accessing-the-outputs","page":"Espy.jl: result extraction","title":"Obtaining and accessing the outputs","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"The following example shows how the user of an espy-annotated function can obtain and access the out variable.","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"1   using Espy\r\n2   ex       = @request gp[].(s,z,material.(a,b))\r\n3   key,nkey = makekey(ex)\r\n4   out      = Vector(undef,nkey)\r\n5   r        = residual(out,key,x,y)\r\n6   a        = out[key.gp[1].material.a]\r\n7   s        = out[key.gp[1].s         ]","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Line 2 creates an expression describing the request.  Line 3 creates the request key, as well as the number of values in the request. Line 4 allocates an array for the outputs, using nkey. In line 5, the residual code generated by @espy is called.  In lines 6 and 7, key is used to access specific outputs.","category":"page"},{"location":"index.html#Outputs-from-multiple-calls","page":"Espy.jl: result extraction","title":"Outputs from multiple calls","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Typicaly, a function like residual is called multiple times.  In a FEM setting, we could be interested in the values 'for each element' and 'for each time step'. Considering that all elements are of the same type (and thus that the dimensions ndim, nnod and ngp are the same for all elements), then key and nkey are the same for all elements. The code then becomes","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"...\r\n1   using Espy\r\n2   ex        = @request gp[].(s,z,material.(a,b))\r\n3   key,nkey  = makekey(ex)\r\n4   out       = Vector(undef,nkey,nel,nstep)\r\n5   iel,istep = ...\r\n6   r         = residual(@view(out[:,iel,istep],key,x,y)\r\n7   a         = out[key.gp[1].material.a,iel,istep]\r\n8   s         = out[key.gp[1].s         ,iel,istep]","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"Thus, a large quantity of results can be stored in one large array, avoiding to clutter the memory-heap many smaller array.","category":"page"},{"location":"index.html#Reference","page":"Espy.jl: result extraction","title":"Reference","text":"","category":"section"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"CurrentModule = Espy","category":"page"},{"location":"index.html","page":"Espy.jl: result extraction","title":"Espy.jl: result extraction","text":"@request\r\nmakekey\r\n@espy\r\n@espydbg\r\nforloop\r\nscalar","category":"page"},{"location":"index.html#Espy.@request","page":"Espy.jl: result extraction","title":"Espy.@request","text":"req = @request expr\n\nCreate a request of internal results wanted from a function. Considering the function presented as example for @espy, examples of possible syntax include\n\nreq       = @request gp[].(s,z,material.(a,b))\nreq       = @request gp[].(s)\nreq       = @request gp[].(material.(a))\n\nThe first expression can be read as follows: \"In the function, there is a for loop over variable igp, and the ressults are wanted as a vector (one element for each cycle of the loop).  Each element of the vector shall be a type (a structure) with a field material, because a function of that name is called in the for loop.  Within that function, a variable a is to be retrived.\n\nNote the need to use parentheses also for single-element lists, as in (s).\n\nSee also: @espy, @espydbg, makekey\n\n\n\n\n\n","category":"macro"},{"location":"index.html#Espy.makekey","page":"Espy.jl: result extraction","title":"Espy.makekey","text":"key = makekey(requested,requestable)\n\nCreate a \"key\" i.e. a data structure of indices into an array out of internal results, returned by the code generated by @espy.\n\nInputs are\n\nrequested a data structure defining a request. This input is provided  by the user of the code to specify what results are to be extracted.\nrequestable a named tuple defining the names and sizes of intermediate results  that can be requested from a given function: this input is provided\n\nExample\n\nrequestable  = (gp=forloop(2, (z=scalar,s=scalar, material=(a=scalar,b=scalar))),)\nrequested    = @request gp[].(s,z,material.(a,b))\nkey,nkey     = makekey(requested,requestable)\n\nreturns key such that\n\nkey.gp[1] == (s=1, z=2, material = (a=3, b=4))\nkey.gp[2] == (s=5, z=6, material = (a=7, b=8))\nkey.gp[2].material.a == 7\nnkey      == 8\n\nSee also: @espy, @espydbg, @request, forloop, scalar\n\n\n\n\n\n","category":"function"},{"location":"index.html#Espy.@espy","page":"Espy.jl: result extraction","title":"Espy.@espy","text":"@espy function residual(x,y)\n    ngp=2\n    r = 0\n    for igp=1:ngp\n        :z = x[igp]+y[igp]\n        :s,dum  = :material(z)\n        r += s\n    end\n    return r\nend\n@espy function material(z)\n    :a = z+1\n    :b = a*z\n    return b,3.\nend\n\nTransform the code of a function in which variables and function calls have been annotated with : in order to allow the extraction of intermediate results.\n\nThe above annotated code will result in the generation of \"clean\" code in which the : annotations have been taken out\n\nfunction residual(x,y)\n    ngp=2\n    r = 0\n    for igp=1:ngp\n        z = x[igp]+y[igp]\n        s,dum  = material(z)\n        r += s\n    end\n    return r\nend\nfunction material(z)\n    a = z+1\n    b = a*z\n    return b,3.\nend\n\nThe macro will also generate code with additional out and key arguments:\n\nfunction residual(out,key,x,y)\n    ngp = 2\n    r   = 0\n    for igp = 1:ngp\n        @espy_loop key gp                     # key_gp = key.gp[igp]\n        z = x[igp]+y[igp]\n        @espy_record out key_gp z             # out[key_gp.z] = z\n        s = @espy_call out key_gp material(z) # s = material(out,key_gp.material,z)\n        @espy_record out key_gp s             # out[key_gp.s] = s\n        r += s\n    end\n    return r\nend\nfunction material(out,key,z)\n    a = z+1\n    @espy_record out key a                    # out[key.a] = a\n    b = a*z\n    @espy_record out key b                    # out[key.b] = b\n    return b\nend\n\nThe above code contains more macros, which in turn evaluate as shown in the comments.  More precisely,\n\n@espy_record out key a\n\nevaluates to\n\nif haskey(key,a)\n    out[key.a] = a\nend\n\nkey is a datastructure generated by makekey based on a @request.\n\nWhen the version of residual with additional parameter out has been called, the content of this output is accessed using key:\n\nrequestable  = (gp=forloop(2, (z=scalar,s=scalar, material=(a=scalar,b=scalar))),)\nrequested    = @request gp[].(s,z,material.(a,b))\nkey,nkey     = makekey(requested,requestable)\nresidual(out,key,x,y)\nigp          = 2\nz            = out[key.gp[igp].z]\n\nSee also: @espydbg, @request, makekey\n\n\n\n\n\n","category":"macro"},{"location":"index.html#Espy.@espydbg","page":"Espy.jl: result extraction","title":"Espy.@espydbg","text":"@espydbg function ...\nend\n\nRun @espy and to generate code and print the output code (for debug purposes).\n\nSee also: @espy, @request, makekey, forloop, scalar\n\n\n\n\n\n","category":"macro"},{"location":"index.html#Espy.forloop","page":"Espy.jl: result extraction","title":"Espy.forloop","text":"forloop\n\nComponent to build the requestable input to [makekey(@ref)] See also: makekey, scalar\n\n\n\n\n\n","category":"type"},{"location":"index.html#Espy.scalar","page":"Espy.jl: result extraction","title":"Espy.scalar","text":"scalar\n\nComponent to build the requestable input to [makekey(@ref)] See also: makekey, forloop\n\n\n\n\n\n","category":"constant"}]
}
